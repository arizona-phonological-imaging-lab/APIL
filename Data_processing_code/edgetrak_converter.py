#!/usr/bin/python
# Converts .con files from EdgeTrak

import os
import re
import string
from math import ceil





class Converter():
	def read_folder_contents(self, folder):
		""" Reads in the contents of a folder and groups 
		the sorted .jpg paths together in a list, and creates an
		object for the  .con file. The folder should contain *only* the 
		relevant jpgs (tongue frames) and the single corresponding con file
		generated by EdgeTrak. """
		self.folder=folder
		folderContents = os.listdir(folder)
		self.jpgPaths=[]
		for fileName in folderContents:                                           # this loop does the sorting of .con and .jpg files
			if '.con' in fileName:
				self.conFile = os.path.normpath(os.path.join(folder, fileName))
			if ".jpg" in fileName:
				self.jpgPaths.append(os.path.splitext(fileName)[0])
			else:
				pass
		self.jpgPaths = sorted(self.jpgPaths)                    # sort the .jpg paths because the .con file columns are ordered according to the jpg filenames
		

	def read_con_file(self):
		"""Reads in a .con file, returns the list self.splitCoords,
		which is a list of the coordinates generated by EdgeTrak and then
		split according to the corresponding .jpg image"""
		conFile = open(self.conFile, 'r')                                      # read in the file
		conLines = conFile.readlines()                                         # create list with lines as elements
		conFile.close()
		self.numFiles = ((len(conLines[0].strip().split())) / 2)          # count number of columns in file and divide by 2 (since 2 columns to each image file)
		self.splitCoords = [[] for i in range(self.numFiles)]             # create list to append paired coordinates for each image file
		for line in conLines:
			i=0
			coords = line.strip().split()                   
			for sublist in self.splitCoords:                            # each sublist corresponds to an image file (tongue frame)
				sublist.append((coords[(2*i)], coords[(2*i)+1]))    # the input .con file has paired columns from left 
				i+=1                                                # to right (1,2), (3,4), (5,6)..., and this assigns each pair to a tuple
				                                                    # and the tuple to its own sublist on splitCoord

	def resample_data(self, resampleTo = 32):
		""" Used to get the EdgeTrak data compatable with 
		AutoTrace, which handles 32 points per traced image. """
		for i in range(self.numFiles):
			origLength = len(self.splitCoords[i])                    # original length of the .con file columns (ie the number of traced points)
			if  origLength > resampleTo:
				resampled = []
				for j in range(resampleTo):
					resampled.append(self.splitCoords[i][int(ceil(j * origLength / resampleTo))])  # walk down the array of tuples (coordinates) in an evenly-spaced manner
				self.splitCoords[i]=resampled
				
			else:
				pass


	def print_new_files(self):
		""" Print out a new file for each .jpg tongue image, 
		using the filename of each .jpg to create the filename for the
		corresponding .txt file. """
		for fileNum in range(self.numFiles):
			outFile= open(self.folder + '/output_' + str(self.jpgPaths[fileNum]) + '.txt' , 'w')
			i=0
			for item in self.splitCoords[fileNum]:
				i+=1
				outFile.write(str(i) + '\t'  + str(item[0]) + '\t' + str(item[1]) + '\n')   # write line in the new file with tab delimiting


       	def main(self,folder):
		self.read_folder_contents(folder)
		self.read_con_file()
		self.resample_data()
		self.print_new_files()


if  __name__ == '__main__':
	folder = raw_input('Enter path to folder containing .con file and its corresponding .jpg images: ')
	Converter().main(folder)
	
